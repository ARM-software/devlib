# typings/re/__init__.pyi

from typing import Pattern, Match, Optional, AnyStr, Callable, Union, List, Tuple


def compile(pattern: AnyStr, flags: int = ...) -> Pattern[AnyStr]: ...
def match(pattern: AnyStr, string: AnyStr, flags: int = ...) -> Optional[Match[AnyStr]]: ...
def fullmatch(pattern: AnyStr, string: AnyStr, flags: int = ...) -> Optional[Match[AnyStr]]: ...
def search(pattern: AnyStr, string: AnyStr, flags: int = ...) -> Optional[Match[AnyStr]]: ...
def sub(pattern: AnyStr, repl: Union[AnyStr, Callable[[Match[AnyStr]], AnyStr]], string: AnyStr, count: int = ..., flags: int = ...) -> AnyStr: ...
def subn(pattern: AnyStr, repl: Union[AnyStr, Callable[[Match[AnyStr]], AnyStr]], string: AnyStr, count: int = ..., flags: int = ...) -> Tuple[AnyStr, int]: ...
def split(pattern: AnyStr, string: AnyStr, maxsplit: int = ..., flags: int = ...) -> List[AnyStr]: ...
def findall(pattern: AnyStr, string: AnyStr, flags: int = ...) -> List[AnyStr]: ...
def finditer(pattern: AnyStr, string: AnyStr, flags: int = ...) -> List[Match[AnyStr]]: ...
def escape(pattern: AnyStr) -> AnyStr: ...
